using System;
using System.Collections.Generic;
using System.Data;
using System.IO;
using System.Linq;
using System.Text;
using DocumentFormat.OpenXml;
using DocumentFormat.OpenXml.Packaging;
using DocumentFormat.OpenXml.Spreadsheet;
using Tennant.GlobalAttributes.Web.Models;
using Tennant.GlobalAttributes.Web.ViewModels;

namespace Tennant.GlobalAttributes.Web.Utils
{
    public class Export
    {
        
        
        //public void SaveWorkbook(ProductTemplateListViewModel productTemplate)
        public void SaveWorkbook(int productId)
        {
            ProductTemplateListViewModel productTemplate = new ProductTemplateListViewModel(productId);
            MemoryStream stream = new MemoryStream();
            SpreadsheetDocument spreadsheetDocument;
            bool isNewFile = true;
            try
            {
                spreadsheetDocument = SpreadsheetDocument.Create(@"c:\temp\123.xlsx", SpreadsheetDocumentType.Workbook); //Create

                if (true)//using (spreadsheetDocument)
                {

                    WorkbookPart workbookPart;

                    //Instantiates workbookpart
                    workbookPart = spreadsheetDocument.AddWorkbookPart(); //If file is new file

                    //Creates Workbook if workbook not existed(For New Excel File), Existing excel file this is not necessary
                    if (workbookPart.Workbook == null)
                        workbookPart.Workbook = new Workbook();

                    Sheets sheets;

                    //
                    if (isNewFile)
                        sheets = workbookPart.Workbook.AppendChild(new Sheets()); //Adding new sheets to the file, if new file
                    else
                        sheets = workbookPart.Workbook.Sheets; //Retrieving existing sheets from the file

                    FileVersion fileVersion = new FileVersion { ApplicationName = "Microsoft Office Excel" };
                    //  workbook.Append(fileVersion);

                    uint tableIndex = 0;

                    //converting the sheets collection to a list of <Sheet>
                    List<Sheet> sheetsList = workbookPart.Workbook.Descendants<Sheet>().ToList();

                    //VC model sheet
                    tableIndex = CreateVCModelSheet(workbookPart, sheets, tableIndex, sheetsList, productTemplate);

                    //Marketing sheet
                    MarketingRuleViewModel marketingRuleViewModel = new MarketingRuleViewModel(productId);

                    tableIndex = CreateMarketingRuleSheet(workbookPart, sheets, tableIndex, sheetsList, marketingRuleViewModel.MarketingRules);

                    //Saving the complete workbook to disk
                    spreadsheetDocument.WorkbookPart.Workbook.Save();

                    spreadsheetDocument.Close();

                }

            }

            catch (Exception)
            {
                // spreadsheetDocument.Close();
                throw;

            }

        }

        private uint CreateVCModelSheet(WorkbookPart workbookPart, Sheets sheets, uint tableIndex, List<Sheet> sheetsList, ProductTemplateListViewModel productTemplate)
        {
            //bool hasSheetExists = false;
            int sheetIndex = 0;
            string relId = "";
            Sheet sheet;

            WorksheetPart worksheetPart;


            worksheetPart = workbookPart.AddNewPart<WorksheetPart>();
            relId = workbookPart.GetIdOfPart(worksheetPart);
            sheet = new Sheet { Name = "VCDATA", SheetId = tableIndex + 1, Id = relId };

            SheetData sheetData = new SheetData();

            Worksheet workSheet = worksheetPart.Worksheet;

            int lastRowIndex = 0;

            if (workSheet != null)
            {
                //Retrieving existing sheet data from the worksheet
                sheetData = workSheet.GetFirstChild<SheetData>();

                //Getting all existing record rows.
                IEnumerable<Row> rows = sheetData.Descendants<Row>();

                //Considering the last row index as total row count. append the records to the last index onwards.
                lastRowIndex = rows.Count();
            }
            else //Creating new worksheet
            {
                workSheet = new Worksheet(sheetData);
                worksheetPart.Worksheet = workSheet;
            }



            //Creating columns..(INDX = 1 , Header)
            List<string> headerList = new List<string>();
            Row headerRow = CreateVCModelContentHeader(headerList, 1, productTemplate);
           // Row headerRow = CreateContentHeader(1, inputDataTable.Columns);
            sheetData.Append(headerRow);
            lastRowIndex = 1;

            //Last Row index
            lastRowIndex++;

            //Worksheet Data Row Number.. (INDX = 2 onwards data)
            uint currDataRowIndex = (uint)lastRowIndex; //From this index on data will get appended.

            //Creating Row Data
            foreach (ProductTemplateLineDTO templateLine in productTemplate.ProductTemplateLine)
            {
                int iterRowIndex = 0;

                //Creating insertble row for the openxml.
                Row contentRow = CreateVCModelContentRow(headerList, currDataRowIndex, templateLine);
                currDataRowIndex++;

                //Appending to sheet data
                sheetData.AppendChild(contentRow);
            }


            //new Worksheet(sheetData);

            //Saving worksheet contents
            worksheetPart.Worksheet.Save();

                sheets.AppendChild(sheet);

            tableIndex++;
            return tableIndex;
        }

        private Row CreateVCModelContentRow(List<string> headerList, UInt32 rowDataIndex, ProductTemplateLineDTO templateLine)
        {

            Row resultRow = new Row { RowIndex = rowDataIndex };
            int i = 0;
            
                
                Cell cell1 = CreateContentCell(headerList[i], rowDataIndex, (templateLine.IsApproved) ? "approved" : "Pending");
                resultRow.Append(cell1);
                i++;
                
                cell1 = CreateContentCell(headerList[i], rowDataIndex, templateLine.IPCGroupingName);
                resultRow.Append(cell1);
                i++;

                cell1 = CreateContentCell(headerList[i], rowDataIndex, templateLine.AttributeName);
                resultRow.Append(cell1);
                i++;

                cell1 = CreateContentCell(headerList[i], rowDataIndex, templateLine.FeatureName);
                resultRow.Append(cell1);
                i++;

                cell1 = CreateContentCell(headerList[i], rowDataIndex, templateLine.MarketingRuleName);
                resultRow.Append(cell1);
                i++;

                cell1 = CreateContentCell(headerList[i], rowDataIndex, templateLine.Internal);
                resultRow.Append(cell1);
                i++;

                foreach (var region in templateLine.MarketingRegionValues)
                {
                    cell1 = CreateContentCell(headerList[i], rowDataIndex, region.RegionValue);
                    resultRow.Append(cell1);
                    i++;

                }
                //cell1 = CreateContentCell(headerList[i], rowDataIndex, templateLine.AttachmentRateReporting);
                //resultRow.Append(cell1);
                //i++;

                cell1 = CreateContentCell(headerList[i], rowDataIndex, templateLine.AttachmentRateInconsistency);
                resultRow.Append(cell1);
                i++;

                cell1 = CreateContentCell(headerList[i], rowDataIndex, templateLine.Profitability);
                resultRow.Append(cell1);
                i++;

                cell1 = CreateContentCell(headerList[i], rowDataIndex, templateLine.ProfitabilityInconsistency);
                resultRow.Append(cell1);
                i++;

                foreach (Feature_Product_Plant plant in templateLine.PlantValues)
                {
                    cell1 = CreateContentCell(headerList[i], rowDataIndex, plant.SBOM_Material);
                    resultRow.Append(cell1);
                    i++;

                    cell1 = CreateContentCell(headerList[i], rowDataIndex, plant.SBOM_Qty);
                    resultRow.Append(cell1);
                    i++;

                    cell1 = CreateContentCell(headerList[i], rowDataIndex, plant.SBOM_Rules);
                    resultRow.Append(cell1);
                    i++;

                    cell1 = CreateContentCell(headerList[i], rowDataIndex, plant.SBOM_Pick);
                    resultRow.Append(cell1);
                    i++;

                    cell1 = CreateContentCell(headerList[i], rowDataIndex, plant.SBOM_Special);
                    resultRow.Append(cell1);
                    i++;

                    cell1 = CreateContentCell(headerList[i], rowDataIndex, plant.SBOM_Cost);
                    resultRow.Append(cell1);
                    i++;
                }

            return resultRow;

        }

        private Row CreateVCModelContentHeader(List<string> headerList,UInt32 rowDataIndex, ProductTemplateListViewModel productTemplate)
        {
            Row resultRow = new Row { RowIndex = rowDataIndex };
            
           List<string> mylist = new List<string>();

                Cell cell1 = CreateHeaderCell("Approval", rowDataIndex, "Approval");
                headerList.Add("Approval");
                resultRow.Append(cell1);

                cell1 = CreateHeaderCell("IPC Group", rowDataIndex, "IPC Group");
                headerList.Add("IPC Group");
                resultRow.Append(cell1);

                cell1 = CreateHeaderCell("Attribute", rowDataIndex, "Attribute");
                headerList.Add("Attribute");
                resultRow.Append(cell1);

                cell1 = CreateHeaderCell("Feature", rowDataIndex, "Feature");
                headerList.Add("Feature");
                resultRow.Append(cell1);

                cell1 = CreateHeaderCell("Marketing Rules", rowDataIndex, "Marketing Rules");
                headerList.Add("Marketing Rules");
                resultRow.Append(cell1);

                cell1 = CreateHeaderCell("Internal", rowDataIndex, "Internal");
                headerList.Add("Internal");
                resultRow.Append(cell1);

                foreach (var region in productTemplate.Regions)
                {
                    cell1 = CreateHeaderCell(region.Name, rowDataIndex, region.Name);
                    headerList.Add(region.Name);
                    resultRow.Append(cell1);
                }

                cell1 = CreateHeaderCell("Attachment Rate", rowDataIndex, "Attachment Rate");
                headerList.Add("Attachment Rate");
                resultRow.Append(cell1);

                cell1 = CreateHeaderCell("Profitability", rowDataIndex, "Profitability");
                headerList.Add("Profitability");
                resultRow.Append(cell1);

                cell1 = CreateHeaderCell("Profitability Inconsistency", rowDataIndex, "Profitability Inconsistency");
                headerList.Add("Profitability Inconsistency");
                resultRow.Append(cell1);

                foreach (var plant in productTemplate.Plants)
                {
                   
                    cell1 = CreateHeaderCell(plant.Name + " SBOM Material", rowDataIndex, plant.Name + " SBOM Material");
                    headerList.Add(plant.Name + " SBOM Material");
                    resultRow.Append(cell1);

                    cell1 = CreateHeaderCell(plant.Name + " SBOM Qty", rowDataIndex, plant.Name + " SBOM Qty");
                    headerList.Add(plant.Name + " SBOM Qty");
                    resultRow.Append(cell1);

                    cell1 = CreateHeaderCell(plant.Name + " SBOM Rules", rowDataIndex, plant.Name + " SBOM Rules");
                    headerList.Add(plant.Name + " SBOM Rules");
                    resultRow.Append(cell1);

                    cell1 = CreateHeaderCell(plant.Name + " SBOM Pick", rowDataIndex, plant.Name + " SBOM Pick");
                    headerList.Add(plant.Name + " SBOM Pick");
                    resultRow.Append(cell1);

                    cell1 = CreateHeaderCell(plant.Name + " SBOM Special", rowDataIndex, plant.Name + " SBOM Special");
                    headerList.Add(plant.Name + " SBOM Special");
                    resultRow.Append(cell1);

                    cell1 = CreateHeaderCell(plant.Name + " SBOM Cost", rowDataIndex, plant.Name + " SBOM Cost");
                    headerList.Add(plant.Name + " SBOM Cost");
                    resultRow.Append(cell1);

                }

                //cell1 = CreateHeaderCell("Change Log", rowDataIndex, "Change Log");
                //headerList.Add("Change Log");
                //resultRow.Append(cell1);

        

            return resultRow;
        }

        private uint CreateManufacturingRuleSheet(WorkbookPart workbookPart, Sheets sheets, uint tableIndex, List<Sheet> sheetsList, ManufacturingRule[] manufacturingRules)
        {
            //bool hasSheetExists = false;
            int sheetIndex = 0;
            string relId = "";
            Sheet sheet;

            WorksheetPart worksheetPart;


            worksheetPart = workbookPart.AddNewPart<WorksheetPart>();
            relId = workbookPart.GetIdOfPart(worksheetPart);
            sheet = new Sheet { Name = "MarketingRule", SheetId = tableIndex + 1, Id = relId };

            SheetData sheetData = new SheetData();

            Worksheet workSheet = worksheetPart.Worksheet;

            int lastRowIndex = 0;

            if (workSheet != null)
            {
                //Retrieving existing sheet data from the worksheet
                sheetData = workSheet.GetFirstChild<SheetData>();

                //Getting all existing record rows.
                IEnumerable<Row> rows = sheetData.Descendants<Row>();

                //Considering the last row index as total row count. append the records to the last index onwards.
                lastRowIndex = rows.Count();
            }
            else //Creating new worksheet
            {
                workSheet = new Worksheet(sheetData);
                worksheetPart.Worksheet = workSheet;
            }
            UInt32 rowDataIndex = 1;
            //Get all the marketing rules
            foreach (Tennant.GlobalAttributes.Web.Models.ManufacturingRule rule in manufacturingRules)
            {
                ManufacturingRule manufacturingRule = ManufacturingRule.FindById(rule.ID);
                CreateManufacturingRuleContent(sheetData, rowDataIndex, manufacturingRule);
            }

            //Saving worksheet contents
            worksheetPart.Worksheet.Save();

            sheets.AppendChild(sheet);

            tableIndex++;
            return tableIndex;
        }

        private void CreateManufacturingRuleContent(SheetData sheetData, UInt32 rowDataIndex, ManufacturingRule manufacturingRule)
        {
            List<string> headerList = new List<string>();
            //header rows
            Row headerRow = new Row { RowIndex = rowDataIndex };
            List<string> mylist = new List<string>();
            Cell headerCell;
            string colHeader = string.Empty;
            for (int x = 0; x <= manufacturingRule.FeatureCells.GetUpperBound(0); x++)
            {
                colHeader = manufacturingRule.FeatureCells[x, 0].AttributeCharacteristicName;
                headerCell = CreateHeaderCell(colHeader, rowDataIndex, colHeader);
                headerList.Add(colHeader);
                headerRow.Append(headerCell);
            }

            for (int x = 0; x <= manufacturingRule.PlantCells.GetUpperBound(0); x++)
            {
                colHeader = manufacturingRule.PlantCells[x, 0].PlantName;
                headerCell = CreateHeaderCell(colHeader, rowDataIndex, colHeader);
                headerList.Add(colHeader);
                headerRow.Append(headerCell);
            }
            sheetData.AppendChild(headerRow);
            rowDataIndex++;
            //detail rows
            for (int y = 0; y <= manufacturingRule.FeatureCells.GetUpperBound(1); y++)
            {
                Row resultRow = new Row { RowIndex = rowDataIndex };
                int col = 0;
                for (int x = 0; x <= manufacturingRule.FeatureCells.GetUpperBound(0); x++)
                {
                    Cell cell1 = CreateContentCell(headerList[col], rowDataIndex, manufacturingRule.FeatureCells[x, y].FeatureCharacteristicName);
                    resultRow.Append(cell1);
                    col++;
                }
                for (int x = 0; x <= manufacturingRule.PlantCells.GetUpperBound(0); x++)
                {
                    Cell cell1 = CreateContentCell(headerList[col], rowDataIndex, manufacturingRule.PlantCells[x, y].Value);
                    resultRow.Append(cell1);
                    col++;
                }
                sheetData.AppendChild(resultRow);
                rowDataIndex++;
            }

        }


        private uint CreateMarketingRuleSheet(WorkbookPart workbookPart, Sheets sheets, uint tableIndex, List<Sheet> sheetsList, MarketingRule[] marketingRules)
        {
            //bool hasSheetExists = false;
            int sheetIndex = 0;
            string relId = "";
            Sheet sheet;

            WorksheetPart worksheetPart;


            worksheetPart = workbookPart.AddNewPart<WorksheetPart>();
            relId = workbookPart.GetIdOfPart(worksheetPart);
            sheet = new Sheet { Name = "MarketingRule", SheetId = tableIndex + 1, Id = relId };

            SheetData sheetData = new SheetData();

            Worksheet workSheet = worksheetPart.Worksheet;

            int lastRowIndex = 0;

            if (workSheet != null)
            {
                //Retrieving existing sheet data from the worksheet
                sheetData = workSheet.GetFirstChild<SheetData>();

                //Getting all existing record rows.
                IEnumerable<Row> rows = sheetData.Descendants<Row>();

                //Considering the last row index as total row count. append the records to the last index onwards.
                lastRowIndex = rows.Count();
            }
            else //Creating new worksheet
            {
                workSheet = new Worksheet(sheetData);
                worksheetPart.Worksheet = workSheet;
            }
            UInt32 rowDataIndex = 1;
            //Get all the marketing rules
            foreach (Tennant.GlobalAttributes.Web.Models.MarketingRule rule in marketingRules)
            {
                MarketingRule marketingRule  = MarketingRule.FindById(rule.ID);
                CreateMarketingRuleContent(sheetData, rowDataIndex, marketingRule);
            }

            //Saving worksheet contents
            worksheetPart.Worksheet.Save();

            sheets.AppendChild(sheet);

            tableIndex++;
            return tableIndex;
        }

        private void CreateMarketingRuleContent(SheetData sheetData,UInt32 rowDataIndex, MarketingRule marketingRule)
        {
            List<string> headerList = new List<string>();
            //header rows
            Row headerRow = new Row { RowIndex = rowDataIndex };
            List<string> mylist = new List<string>();
            Cell headerCell;
            string colHeader = string.Empty;
            for (int x = 0; x <= marketingRule.FeatureCells.GetUpperBound(0); x++)
            {
                colHeader = marketingRule.FeatureCells[x, 0].AttributeCharacteristicName;
                headerCell = CreateHeaderCell(colHeader, rowDataIndex, colHeader);
                headerList.Add(colHeader);
                headerRow.Append(headerCell);
            }

            for (int x = 0; x <= marketingRule.RegionCells.GetUpperBound(0); x++)
            {
                colHeader = marketingRule.RegionCells[x, 0].RegionName;
                headerCell = CreateHeaderCell(colHeader, rowDataIndex, colHeader);
                headerList.Add(colHeader);
                headerRow.Append(headerCell);
            }
            sheetData.AppendChild(headerRow);
            rowDataIndex++;
            //detail rows
            for (int y = 0; y <= marketingRule.FeatureCells.GetUpperBound(1); y++)
            {
                Row resultRow = new Row { RowIndex = rowDataIndex };
                int col = 0;
                for (int x = 0; x <= marketingRule.FeatureCells.GetUpperBound(0); x++)
                {
                     Cell cell1 = CreateContentCell(headerList[col], rowDataIndex, marketingRule.FeatureCells[x,y].FeatureCharacteristicName);
                    resultRow.Append(cell1);
                    col++ ;
                }
                for(int x=0;x<=marketingRule.RegionCells.GetUpperBound(0);x++)
                {
                    Cell cell1 = CreateContentCell(headerList[col], rowDataIndex, marketingRule.RegionCells[x,y].Value);
                    resultRow.Append(cell1);
                    col++ ;
                }  
                sheetData.AppendChild(resultRow);
                rowDataIndex++;
            }

        }

        //private Row CreateMarketingRuleContentHeader(List<string> headerList, UInt32 rowDataIndex, MarketingRule marketingRule)
        //{
        //    Row resultRow = new Row { RowIndex = rowDataIndex };

        //    List<string> mylist = new List<string>();
        //    Cell cell1;
        //    string colHeader = string.Empty;
        //    for (int i = 0; i <= marketingRule.FeatureCells.GetUpperBound(0); i++)
        //    {
        //        colHeader = marketingRule.FeatureCells[i, 0].AttributeCharacteristicName;
        //        cell1 = CreateHeaderCell(colHeader, rowDataIndex, colHeader);
        //        headerList.Add(colHeader);
        //        resultRow.Append(cell1);
        //    }

        //    for (int i = 0; i <= marketingRule.RegionCells.GetUpperBound(0); i++)
        //    {
        //        colHeader = marketingRule.RegionCells[x, 0].RegionName;
        //        cell1 = CreateHeaderCell(colHeader, rowDataIndex, colHeader);
        //        headerList.Add(colHeader);
        //        resultRow.Append(cell1);
        //    }

        
        //    return resultRow;
        //}

        private uint CreateNewSheet(WorkbookPart workbookPart, Sheets sheets, uint tableIndex, List<Sheet> sheetsList, DataTable inputDataTable)
        {
            bool hasSheetExists = false;
            int sheetIndex = 0;
            string relId = "";
            Sheet sheet;

            //Checking sheet exists in the excel file.
            sheetIndex = sheetsList.FindIndex(c => c.Name == inputDataTable.TableName);

            if (sheetIndex >= 0)
            {
                hasSheetExists = true;
            }

            WorksheetPart worksheetPart;

            if (!hasSheetExists) //If a new sheet
            {

                worksheetPart = workbookPart.AddNewPart<WorksheetPart>();
                relId = workbookPart.GetIdOfPart(worksheetPart);
                sheet = new Sheet { Name = inputDataTable.TableName, SheetId = tableIndex + 1, Id = relId };
            }
            else // if sheet already exists
            {
                sheet = sheetsList[sheetIndex];

                List<WorksheetPart> partList = workbookPart.WorksheetParts.ToList();

                // Take the existing the sheet reference from the workbook.
                WorksheetPart worksheetPart1 = (WorksheetPart)(workbookPart.GetPartById(sheet.Id));

                worksheetPart = worksheetPart1;

                //Retriving RelationID form the workbookPart
                relId = workbookPart.GetIdOfPart(worksheetPart);
                // partList.FindAll( c=> c.)
                // worksheetPart = workbookPart.AddNewPart<WorksheetPart>();
            }

            SheetData sheetData = new SheetData();

            Worksheet workSheet = worksheetPart.Worksheet;

            int lastRowIndex = 0;

            if (workSheet != null)
            {
                //Retrieving existing sheet data from the worksheet
                sheetData = workSheet.GetFirstChild<SheetData>();

                //Getting all existing record rows.
                IEnumerable<Row> rows = sheetData.Descendants<Row>();

                //Considering the last row index as total row count. append the records to the last index onwards.
                lastRowIndex = rows.Count();
            }
            else //Creating new worksheet
            {
                workSheet = new Worksheet(sheetData);
                worksheetPart.Worksheet = workSheet;
            }

            //If Data Table is not empty
            if (inputDataTable != null && inputDataTable.Rows.Count > 0)
            {
                //If Not Sheet already exists(Based on Table Name) -- creating column headers for the excel sheet
                if (!hasSheetExists || lastRowIndex < 1)
                {
                    //Creating columns..(INDX = 1 , Header)
                    Row headerRow = CreateContentHeader(1, inputDataTable.Columns);
                    sheetData.Append(headerRow);
                    lastRowIndex = 1;
                }

                //Last Row index
                lastRowIndex++;

                //Worksheet Data Row Number.. (INDX = 2 onwards data)
                uint currDataRowIndex = (uint)lastRowIndex; //From this index on data will get appended.

                //Creating Row Data
                for (int iterRowIndex = 0; iterRowIndex < inputDataTable.Rows.Count; iterRowIndex++)
                {
                    //Retrieving current DataRow from DataTable
                    DataRow currentInputRow = inputDataTable.Rows[iterRowIndex];

                    //Creating insertble row for the openxml.
                    Row contentRow = CreateContentRow(currDataRowIndex, currentInputRow,
                                                      inputDataTable.Columns);
                    currDataRowIndex++;

                    //Appending to sheet data
                    sheetData.AppendChild(contentRow);
                }
            }

            //new Worksheet(sheetData);

            //Saving worksheet contents
            worksheetPart.Worksheet.Save();

            //If sheet new, then appending to sheets collection
            if (!hasSheetExists)
                sheets.AppendChild(sheet);

            tableIndex++;
            return tableIndex;
        }

        /// <summary>
        /// Creates the content header.
        /// </summary>
        /// <param name="rowDataIndex">Index of the row data.</param>
        /// <param name="dataColumns">The data columns.</param>
        /// <returns></returns>
        private Row CreateContentHeader(UInt32 rowDataIndex, DataColumnCollection dataColumns)
        {
            Row resultRow = new Row { RowIndex = rowDataIndex };

            for (int iterColIndex = 0; iterColIndex < dataColumns.Count; iterColIndex++)
            {
                Cell cell1 = CreateHeaderCell(dataColumns[iterColIndex].ColumnName, rowDataIndex, dataColumns[iterColIndex].ColumnName);  //CreateTextCell("A", rowDataIndex, Convert.ToString(dataRow[iterColIndex]));
                resultRow.Append(cell1);

            }

            return resultRow;
        }

        /// <summary>
        /// Creates the content row.
        /// </summary>
        /// <param name="rowDataIndex">The rowDataIndex.</param>
        /// <param name="dataRow">DataRow</param>
        /// <param name="dataColumns">DataColumnCollection</param>
        /// <returns></returns>
        private Row CreateContentRow(UInt32 rowDataIndex, DataRow dataRow, DataColumnCollection dataColumns)
        {

            Row resultRow = new Row { RowIndex = rowDataIndex };

            for (int iterColIndex = 0; iterColIndex < dataColumns.Count; iterColIndex++)
            {
                Cell cell1 = CreateContentCell(dataColumns[iterColIndex].ColumnName, rowDataIndex, dataRow[iterColIndex]);  //CreateTextCell("A", rowDataIndex, Convert.ToString(dataRow[iterColIndex]));
                resultRow.Append(cell1);

            }

            return resultRow;

        }

        /// <summary>
        /// Creates the content cell.
        /// </summary>
        /// <param name="header">The header.</param>
        /// <param name="index">The rowDataIndex.</param>
        /// <param name="inputValue">The input value.</param>
        /// <returns></returns>
        private Cell CreateContentCell(string header, UInt32 index, object inputValue)
        {
            Cell resultCell = null;

            if (inputValue == null)
            {
                resultCell = CreateTextCell(header, index, string.Empty);
                return resultCell;
            }
            Type objectType = inputValue.GetType();

            TypeCode objectTypeCode;

            bool parseSuccess = Enum.TryParse(objectType.Name, true, out objectTypeCode);

            if (parseSuccess)
            {
                switch (objectTypeCode)
                {
                    // Number Fields
                    case TypeCode.UInt64:
                    case TypeCode.UInt32:
                    case TypeCode.UInt16:
                    case TypeCode.Int64:
                    case TypeCode.Int32:
                    case TypeCode.Int16:
                    case TypeCode.Double:
                    case TypeCode.Decimal:
                        resultCell = CreateNumberCell(header, index, inputValue);
                        break;
                    // Date Time Field
                    case TypeCode.DateTime:
                        resultCell = CreateDateCell(header, index, inputValue);
                        break;
                    // Boolean Field
                    case TypeCode.Boolean:
                        resultCell = CreateBooleanCell(header, index, inputValue);
                        break;

                    default:
                        resultCell = CreateTextCell(header, index, inputValue);
                        break;
                    //case TypeCode.
                }
            }
            else
                resultCell = CreateTextCell(header, index, inputValue);
            return resultCell;
        }

        /// <summary>
        /// Creates the header cell.
        /// </summary>
        /// <param name="header">The header.</param>
        /// <param name="index">The index.</param>
        /// <param name="text">The text.</param>
        /// <returns></returns>
        private Cell CreateHeaderCell(string header, UInt32 index, object text)
        {
            Cell c = new Cell { DataType = CellValues.String, CellReference = header + index };

            CellValue cellValue = new CellValue
            {
                Text = Convert.ToString(text),
            };

            c.Append(cellValue);

            return c;

        }

        /// <summary>
        /// Creates the text cell.
        /// </summary>
        /// <param name="header">The header.</param>
        /// <param name="index">The rowDataIndex.</param>
        /// <param name="text">The text.</param>
        /// <returns></returns>
        private Cell CreateTextCell(string header, UInt32 index, object text)
        {

            Cell c = new Cell { DataType = CellValues.InlineString, CellReference = header + index };

            InlineString istring = new InlineString();

            Text t = new Text { Text = Convert.ToString(text) };

            istring.Append(t);

            c.Append(istring);

            return c;

        }

        /// <summary>
        /// Creates the number cell.
        /// </summary>
        /// <param name="header">The header.</param>
        /// <param name="index">The rowDataIndex.</param>
        /// <param name="number">The number.</param>
        /// <returns></returns>
        private Cell CreateNumberCell(string header, UInt32 index, object number)
        {

            Cell c = new Cell
            {
                CellReference = header + index,
                DataType = CellValues.Number
            };

            CellValue v = new CellValue
            {
                Text = Convert.ToString(number),
                // DataType = CellValues.Number,
            };

            c.Append(v);

            return c;

        }

        /// <summary>
        /// Creates the date cell.
        /// </summary>
        /// <param name="header">The header.</param>
        /// <param name="index">The rowDataIndex.</param>
        /// <param name="number">The date.</param>
        /// <returns></returns>
        private Cell CreateDateCell(string header, UInt32 index, object date)
        {

            Cell c = new Cell
            {
                CellReference = header + index,
                DataType = CellValues.Date
            };

            CellValue v = new CellValue
            {
                Text = Convert.ToString(date),
                // DataType = CellValues.Number,
            };

            c.Append(v);

            return c;

        }

        /// <summary>
        /// Creates the date cell.
        /// </summary>
        /// <param name="header">The header.</param>
        /// <param name="index">The rowDataIndex.</param>
        /// <param name="number">The date.</param>
        /// <returns></returns>
        private Cell CreateBooleanCell(string header, UInt32 index, object boolVal)
        {

            Cell c = new Cell
            {
                CellReference = header + index,
                DataType = CellValues.Boolean
            };

            CellValue v = new CellValue
            {
                Text = Convert.ToString(boolVal),
                // DataType = CellValues.Number,
            };

            c.Append(v);

            return c;

        }

        #region DeleteWorksheet()

        /// <summary>
        /// Deletes the A work sheet.
        /// </summary>
        /// <param name="fileName">Name of the file.</param>
        /// <param name="sheetToDelete">The sheet to delete.</param>
        public void DeleteWorkSheet(string fileName, string sheetToDelete)
        {
            string Sheetid = "";
            //Open the workbook
            using (SpreadsheetDocument document = SpreadsheetDocument.Open(fileName, true))
            {
                WorkbookPart wbPart = document.WorkbookPart;

                // Get the pivot Table Parts
                IEnumerable<PivotTableCacheDefinitionPart> pvtTableCacheParts = wbPart.PivotTableCacheDefinitionParts;
                Dictionary<PivotTableCacheDefinitionPart, string> pvtTableCacheDefinationPart = new Dictionary<PivotTableCacheDefinitionPart, string>();
                foreach (PivotTableCacheDefinitionPart Item in pvtTableCacheParts)
                {
                    PivotCacheDefinition pvtCacheDef = Item.PivotCacheDefinition;
                    //Check if this CacheSource is linked to SheetToDelete
                    var pvtCahce = pvtCacheDef.Descendants<CacheSource>().Where(s => s.WorksheetSource.Sheet == sheetToDelete);
                    if (pvtCahce.Count() > 0)
                    {

                        pvtTableCacheDefinationPart.Add(Item, Item.ToString());
                    }
                }
                foreach (var Item in pvtTableCacheDefinationPart)
                {
                    wbPart.DeletePart(Item.Key);
                }
                //Get the SheetToDelete from workbook.xml
                Sheet theSheet = wbPart.Workbook.Descendants<Sheet>().Where(s => s.Name == sheetToDelete).FirstOrDefault();
                if (theSheet == null)
                {
                    // The specified sheet doesn't exist.
                }
                //Store the SheetID for the reference
                Sheetid = theSheet.SheetId;

                // Remove the sheet reference from the workbook.
                WorksheetPart worksheetPart = (WorksheetPart)(wbPart.GetPartById(theSheet.Id));
                theSheet.Remove();

                // Delete the worksheet part.
                wbPart.DeletePart(worksheetPart);

                //Get the DefinedNames
                var definedNames = wbPart.Workbook.Descendants<DefinedNames>().FirstOrDefault();
                if (definedNames != null)
                {
                    foreach (DefinedName Item in definedNames)
                    {
                        // This condition checks to delete only those names which are part of Sheet in question
                        if (Item.Text.Contains(sheetToDelete + "!"))
                            Item.Remove();
                    }
                }
                // Get the CalculationChainPart
                //Note: An instance of this part type contains an ordered set of references to all cells in all worksheets in the
                //workbook whose value is calculated from any formula

                CalculationChainPart calChainPart;
                calChainPart = wbPart.CalculationChainPart;
                if (calChainPart != null)
                {
                    var calChainEntries = calChainPart.CalculationChain.Descendants<CalculationCell>().Where(c => c.SheetId == Sheetid);
                    foreach (CalculationCell Item in calChainEntries)
                    {
                        Item.Remove();
                    }
                    if (calChainPart.CalculationChain.Count() == 0)
                    {
                        wbPart.DeletePart(calChainPart);
                    }
                }

                // Save the workbook.
                wbPart.Workbook.Save();
            }
        }

        #endregion

        #region  ClearWorkSheetData

        /// <summary>
        /// Deletes the A work sheet.
        /// </summary>
        /// <param name="fileName">Name of the file.</param>
        /// <param name="sheetToDelete">The sheet to delete.</param>
        public void ClearWorkSheetData(string fileName, string sheetToClear)
        {
            string Sheetid = "";
            //Open the workbook
            using (SpreadsheetDocument document = SpreadsheetDocument.Open(fileName, true))
            {
                WorkbookPart wbPart = document.WorkbookPart;

                // Get the pivot Table Parts
                IEnumerable<PivotTableCacheDefinitionPart> pvtTableCacheParts = wbPart.PivotTableCacheDefinitionParts;
                Dictionary<PivotTableCacheDefinitionPart, string> pvtTableCacheDefinationPart = new Dictionary<PivotTableCacheDefinitionPart, string>();
                foreach (PivotTableCacheDefinitionPart Item in pvtTableCacheParts)
                {
                    PivotCacheDefinition pvtCacheDef = Item.PivotCacheDefinition;
                    //Check if this CacheSource is linked to SheetToDelete
                    var pvtCahce = pvtCacheDef.Descendants<CacheSource>().Where(s => s.WorksheetSource.Sheet == sheetToClear);
                    if (pvtCahce.Count() > 0)
                    {

                        pvtTableCacheDefinationPart.Add(Item, Item.ToString());
                    }
                }
                foreach (var Item in pvtTableCacheDefinationPart)
                {
                    wbPart.DeletePart(Item.Key);
                }
                //Get the SheetToDelete from workbook.xml
                Sheet theSheet = wbPart.Workbook.Descendants<Sheet>().Where(s => s.Name == sheetToClear).FirstOrDefault();
                if (theSheet == null)
                {
                    // The specified sheet doesn't exist.
                }
                //Store the SheetID for the reference
                Sheetid = theSheet.SheetId;

                // Remove the sheet reference from the workbook.
                WorksheetPart worksheetPart = (WorksheetPart)(wbPart.GetPartById(theSheet.Id));

                Worksheet workSheet = worksheetPart.Worksheet;
                SheetData sheetData = workSheet.GetFirstChild<SheetData>();

                for (int childIndex = 1; childIndex < sheetData.ChildElements.Count; childIndex++)
                {
                    sheetData.RemoveChild(sheetData.ChildElements[childIndex]);
                }

                IEnumerable<Row> rows = sheetData.Descendants<Row>();

                List<Row> rowsList = rows.ToList();

                //rowsList.RemoveRange(1, rowsList.Count - 1);

                // Save the workbook.
                wbPart.Workbook.Save();
            }
        }

        #endregion

        #region Create(string fileSavePath, DataSet dataSet)

        /// <summary>
        /// Saves the specified file save path.
        /// </summary>
        /// <param name="fileSavePath">The file save path.</param>
        /// <param name="dataSet">The data set.</param>
        public void Create(string fileSavePath, DataSet dataSet)
        {

            Dictionary<string, List<OpenXmlElement>> inputDictionary = ToSheets(dataSet);

            Create(fileSavePath, inputDictionary);
            // inputDictionary
        }

        /// <summary>
        /// Creates the specified path.
        /// </summary>
        /// <param name="path">The path.</param>
        /// <param name="sets">The sets.</param>
        private void Create(string path, Dictionary<String, List<OpenXmlElement>> sets)
        {
            using (SpreadsheetDocument package = SpreadsheetDocument.Create(path, SpreadsheetDocumentType.Workbook))
            {
                WorkbookPart workbookpart = package.AddWorkbookPart();
                workbookpart.Workbook = new Workbook();

                Sheets sheets = workbookpart.Workbook.AppendChild(new Sheets());

                foreach (KeyValuePair<String, List<OpenXmlElement>> set in sets)
                {
                    WorksheetPart worksheetpart = workbookpart.AddNewPart<WorksheetPart>();
                    worksheetpart.Worksheet = new Worksheet(new SheetData(set.Value));
                    worksheetpart.Worksheet.Save();

                    Sheet sheet = new Sheet()
                    {
                        Id = workbookpart.GetIdOfPart(worksheetpart),
                        SheetId = (uint)(sheets.Count() + 1),
                        Name = set.Key
                    };
                    sheets.AppendChild(sheet);
                }
                workbookpart.Workbook.Save();
            }
        }

        /// <summary>
        /// Toes the sheets.
        /// </summary>
        /// <param name="ds">The ds.</param>
        /// <returns></returns>
        private Dictionary<string, List<OpenXmlElement>> ToSheets(DataSet ds)
        {
            return
                (from dt in ds.Tables.OfType<DataTable>()
                 select new
                 {
                     // Sheet Name
                     Key = dt.TableName,
                     Value = (
                         // Sheet Columns
                     new List<OpenXmlElement>(
                        new OpenXmlElement[]
                {
                    new Row(
                        from d in dt.Columns.OfType<DataColumn>()
                        select (OpenXmlElement)new Cell()
                        {
                            CellValue = new CellValue(d.ColumnName),
                            DataType = CellValues.String
                        })
                })).Union
                         // Sheet Rows
                     ((from dr in dt.Rows.OfType<DataRow>()
                       select ((OpenXmlElement)new Row(from dc in dr.ItemArray
                                                       select (OpenXmlElement)new Cell()
                                                       {
                                                           CellValue = new CellValue(dc.ToString()),
                                                           DataType = CellValues.String
                                                       })))).ToList()
                 }).ToDictionary(p => p.Key, p => p.Value);
        }

        #endregion

        #region Read

        /// <summary>
        /// Reads the specified file save path.
        /// </summary>
        /// <param name="fileSavePath">The file save path.</param>
        /// <returns></returns>
        public DataSet Read(string fileSavePath)
        {

            DataSet resultSet = new DataSet();

            using (SpreadsheetDocument spreadSheetDocument = SpreadsheetDocument.Open(fileSavePath, false))
            {

                WorkbookPart workbookPart = spreadSheetDocument.WorkbookPart;
                IEnumerable<Sheet> sheets = spreadSheetDocument.WorkbookPart.Workbook.GetFirstChild<Sheets>().Elements<Sheet>();

                foreach (Sheet sheet in sheets)
                {
                    DataTable dt = new DataTable();

                    string relationshipId = sheet.Id.Value;
                    string sheetName = sheet.SheetId;
                    dt.TableName = sheet.SheetId;

                    WorksheetPart worksheetPart =
                        (WorksheetPart)spreadSheetDocument.WorkbookPart.GetPartById(relationshipId);
                    Worksheet workSheet = worksheetPart.Worksheet;
                    SheetData sheetData = workSheet.GetFirstChild<SheetData>();
                    IEnumerable<Row> rows = sheetData.Descendants<Row>();

                    foreach (Cell cell in rows.ElementAt(0))
                    {
                        dt.Columns.Add(GetCellValue(spreadSheetDocument, cell));
                    }

                    List<Row> rowsList = new List<Row>();

                    rowsList = rows.ToList();

                    //Start from 1, first row is header.
                    for (int iterRowIndex = 1; iterRowIndex < rowsList.Count; iterRowIndex++) //this will also include your header row...
                    {
                        Row row = rowsList[iterRowIndex];

                        DataRow tempRow = dt.NewRow();

                        for (int i = 0; i < row.Descendants<Cell>().Count(); i++)
                        {
                            tempRow[i] = GetCellValue(spreadSheetDocument, row.Descendants<Cell>().ElementAt(i));
                        }

                        dt.Rows.Add(tempRow);
                    }

                    resultSet.Tables.Add(dt);
                }

            }

            return resultSet;
        }

        /// <summary>
        /// Gets the cell value.
        /// </summary>
        /// <param name="document">The document.</param>
        /// <param name="cell">The cell.</param>
        /// <returns></returns>
        public static string GetCellValue(SpreadsheetDocument document, Cell cell)
        {
            SharedStringTablePart stringTablePart = document.WorkbookPart.SharedStringTablePart;
            string value = cell.CellValue != null ? cell.CellValue.InnerXml : string.Empty;

            if (cell.DataType != null && cell.DataType.Value == CellValues.SharedString)
            {
                return stringTablePart.SharedStringTable.ChildElements[Int32.Parse(value)].InnerText;
            }
            else
            {
                return value;
            }
        }

        #endregion

    }
}
